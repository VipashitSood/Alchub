@model TopMenuModel
@using Nop.Services.Catalog;
@inject ICategoryService categoryService

@functions {
    async Task CategoryMobileLine(TopMenuModel.CategoryLineModel lineModel)
    {
        <li class="header__mobileSelecter">

            @{
                var url = string.Empty;
                var subCategoryParentCategoryId = 0;
                var category = await categoryService.GetCategoryByIdAsync(lineModel.Category.Id);
                var parentCategoryId =  category == null ? 0 : category.ParentCategoryId;
                if (parentCategoryId == 0)
                    url = "/search?cid=" + lineModel.Category.Id;
                else
                {
                    var subCategory = await categoryService.GetCategoryByIdAsync(parentCategoryId);
                    subCategoryParentCategoryId = subCategory == null ? 0 : subCategory.ParentCategoryId;

                    if (subCategoryParentCategoryId == 0)
                        url = "/search?cid=" + parentCategoryId + "&subCatid=" + lineModel.Category.Id;
                    else
                        url = "/search?cid=" + subCategoryParentCategoryId + "&subCatid=" + parentCategoryId + "," + lineModel.Category.Id;
                }
            }

            <a href="@url" class="header__withCategories">
                @lineModel.Category.Name
                @*@if (lineModel.Category.NumberOfProducts.HasValue)
                    {
                        <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                    }*@
            </a>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                    //responsive (all categories)
                    lineModel.Category.SubCategories :
                    //standard design (only categories with "IncludeInTopMenu")
                    lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <div class="header__plusButton"></div>
                    <div class="header__sublistWrapMobile">
                        <ul class=" @levelClass">
                            <li class="header__backButton" id="closeFirstLevel"><span>Back</span></li>
                            @foreach (var subCategory in subCategories)
                            {
                                var categoryLineModel = new TopMenuModel.CategoryLineModel
                                {
                                    Category = subCategory,
                                    Level = lineModel.Level + 1,
                                    ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                                };
                                await CategoryMobileLine(categoryLineModel);
                            }
                        </ul>
                    </div>

                }
            }
        </li>
    }
}


@functions {
    async Task CategoryLine(TopMenuModel.CategoryLineModel lineModel)
    {
        <li>
            @{
                var url = string.Empty;
                var subCategoryParentCategoryId = 0;
                var category = await categoryService.GetCategoryByIdAsync(lineModel.Category.Id);
                var parentCategoryId = category == null ? 0 : category.ParentCategoryId;
                if (parentCategoryId == 0)
                    url = "/search?cid=" + lineModel.Category.Id;
                else
                {
                    var subCategory = await categoryService.GetCategoryByIdAsync(parentCategoryId);
                    subCategoryParentCategoryId = subCategory == null ? 0 : subCategory.ParentCategoryId;

                    if (subCategoryParentCategoryId == 0)
                        url = "/search?cid=" + parentCategoryId + "&subCatid=" + lineModel.Category.Id;
                    else
                        url = "/search?cid=" + subCategoryParentCategoryId + "&subCatid=" + parentCategoryId + "," + lineModel.Category.Id;
                }
            }

            <a href="@url">
                @lineModel.Category.Name
                @*@if (lineModel.Category.NumberOfProducts.HasValue)
                    {
                        <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                    }*@
            </a>
            @{
                //subcategories
                var subCategories = lineModel.ResponsiveMobileMenu ?
                    //responsive (all categories)
                    lineModel.Category.SubCategories :
                    //standard design (only categories with "IncludeInTopMenu")
                    lineModel.Category.SubCategories.Where(x => x.IncludeInTopMenu).ToList();

                var levelClass = "";
                if (lineModel.Level == 0)
                {
                    levelClass = "first-level";
                }
                if (subCategories.Count > 0)
                {
                    <div class="sublist-toggle"></div>
                    <ul class="sublist @levelClass">
                        @foreach (var subCategory in subCategories)
                        {
                            var categoryLineModel = new TopMenuModel.CategoryLineModel
                            {
                                Category = subCategory,
                                Level = lineModel.Level + 1,
                                ResponsiveMobileMenu = lineModel.ResponsiveMobileMenu
                            };
                            await CategoryLine(categoryLineModel);
                        }
                    </ul>
                }
            }
        </li>
    }
}
<ul class="top-menu notmobile d-xl-block d-none">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuBefore, additionalData = Model })
    @if (Model.DisplayHomepageMenuItem)
    {
        <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
    }
    @if (!Model.UseAjaxMenu)
    {
        var rootCategories = Model.Categories.Where(x => x.IncludeInTopMenu).ToList();
        @foreach (var category in rootCategories)
        {
            var categoryLineModel = new TopMenuModel.CategoryLineModel
            {
                Category = category
            };
            await CategoryLine(categoryLineModel);
        }

    }
    @foreach (var topic in Model.Topics)
    {
        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    }
    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    {
        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    }
    @if (Model.DisplayProductSearchMenuItem)
    {
        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    }
    @if (Model.DisplayCustomerInfoMenuItem)
    {
        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    }
    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    {
        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    }
    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    {
        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    }
    @if (Model.DisplayContactUsMenuItem)
    {
        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    }
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderMenuAfter, additionalData = Model })
</ul>
@{
    //var rootCategoriesResponsive = Model.Categories.ToList();
    ////name it "Categories" if we have only categories. Otherwise, "Menu"
    //var responsiveMenuTitle = Model.HasOnlyCategories ? T("Categories") : T("Menu");
    //@*<div class="menu-toggle">@responsiveMenuTitle</div>*@
    //<ul class="top-menu mobile alchub-mobile">
    //    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuBefore, additionalData = Model })
    //    @if (Model.DisplayHomepageMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("Homepage")">@T("Homepage")</a></li>
    //    }
    //    @if (!Model.UseAjaxMenu)
    //    {
    //        <li class="header__backButton" id="closeFirstLevel"><span>Back</span></li>
    //        @foreach (var category in rootCategoriesResponsive)
    //        {
    //            var categoryLineModel = new TopMenuModel.CategoryLineModel
    //            {
    //                Category = category,
    //                ResponsiveMobileMenu = true
    //            };
    //            await CategoryMobileLine(categoryLineModel);
    //        }

    //    }
    //    @foreach (var topic in Model.Topics)
    //    {
    //        <li><a href="@Url.RouteUrl("Topic", new { SeName = topic.SeName })">@topic.Name</a></li>
    //    }
    //    @if (Model.NewProductsEnabled && Model.DisplayNewProductsMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("NewProducts")">@T("Products.NewProducts")</a></li>
    //    }
    //    @if (Model.DisplayProductSearchMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("ProductSearch")">@T("Search")</a></li>
    //    }
    //    @if (Model.DisplayCustomerInfoMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")</a></li>
    //    }
    //    @if (Model.BlogEnabled && Model.DisplayBlogMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("Blog")">@T("Blog")</a></li>
    //    }
    //    @if (Model.ForumEnabled && Model.DisplayForumsMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("Boards")">@T("Forum.Forums")</a></li>
    //    }
    //    @if (Model.DisplayContactUsMenuItem)
    //    {
    //        <li><a href="@Url.RouteUrl("ContactUs")">@T("ContactUs")</a></li>
    //    }
    //    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MobHeaderMenuAfter, additionalData = Model })
    //</ul>

    //@if (Model.UseAjaxMenu)
    //{
    //    <script asp-location="Footer">
    //    $(document).ready(function () {
    //        $('.menu-toggle').on('click', function () {
    //            $(this).siblings('.top-menu.mobile').slideToggle('slow');
    //        });
    //        var localized_data = {
    //            AjaxFailure: "@T("MainMenu.AjaxFailure")"
    //        };
    //        mainMenu.init('@Url.RouteUrl("GetCatalogRoot")', '@Url.RouteUrl("GetCatalogSubCategories")', 'ul.top-menu.notmobile', 'ul.top-menu.mobile', localized_data);
    //    });
    //    </script>

    //    <script src="~/js/public.menu.js" asp-location="Footer"></script>

    //}
    //else
    //{
    //    <script asp-location="Footer">
    //        $(document).ready(function () {
    //            $('.menu-toggle').on('click', function () {
    //                $(this).siblings('.top-menu.mobile').slideToggle('slow');
    //            });
    //            $('.top-menu.mobile .sublist-toggle').on('click', function () {
    //                $(this).siblings('.sublist').slideToggle('slow');
    //            });
    //        });
    //    </script>

    //}

}