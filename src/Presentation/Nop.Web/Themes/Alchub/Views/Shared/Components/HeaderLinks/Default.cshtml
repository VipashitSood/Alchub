@model HeaderLinksModel
@using Nop.Core.Domain.Customers
@inject Nop.Core.IWebHelper webHelper
@namespace System.Text.Encodings.Web
<div class="header-links">
    <ul>
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksBefore, additionalData = Model })
        <li class="my-account-wrapper">
            <a href="#" class="ico-myaccount"></a>
            <ul>
                @if (Model.IsAuthenticated)
                {

                    <li><a href="@Url.RouteUrl("CustomerInfo")">@T("Account.MyAccount")@*@Model.CustomerName*@</a></li>


                    <li><a href="@Url.RouteUrl("Logout")">@T("Account.Logout")</a></li>
                }
                else
                {
                    var returnUrl = Context.Request.Query.TryGetValue("returnUrl", out var url) && !StringValues.IsNullOrEmpty(url)
                        ? url.ToString()
                        : webHelper.GetRawUrl(Context.Request);

                    <li><a href="@Url.RouteUrl("Login", new { returnUrl })">@T("Account.Login")</a></li>

                    @if (Model.RegistrationType != UserRegistrationType.Disabled)
                    {
                        <li><a href="@Url.RouteUrl("Register", new { returnUrl })">@T("Account.Register")</a></li>
                    }

                }
            </ul>

        </li>

        @if (Model.AllowPrivateMessages)
        {
            <li>
                <a href="@Url.RouteUrl("PrivateMessages", new { tab = "" })" class="ico-inbox">
                    <span class="inbox-label">@T("PrivateMessages.Inbox")</span>
                    <span class="inbox-unread">@Model.UnreadPrivateMessages</span>
                </a>
            </li>
        }
        @if (Model.WishlistEnabled)
        {
            <li class="wishlist-wrapper">
                <a href="@Url.RouteUrl("CustomerFavorite")" class="ico-wishlist">
                    <span class="wishlist-label">@T("Wishlist")</span>
                    @*@if (Model.WishlistItems > 0)
                    {
                        <span class="wishlist-qty active">@T("Wishlist.HeaderQuantity", Model.WishlistItems)</span>
                    }
                    else
                    {
                        <span class="wishlist-qty Inactive"></span>
                    }*@
                </a>
            </li>
        }
        @if (Model.ShoppingCartEnabled)
        {
            <li id="topcartlink">
                <a href="@Url.RouteUrl("ShoppingCart")" class="ico-cart">
                    <span class="cart-label">@T("ShoppingCart")</span>
                    @if (Model.ShoppingCartItems > 0)
                    {
                        <span class="cart-qty active">@T("ShoppingCart.HeaderQuantity", Model.ShoppingCartItems)</span>
                    }
                    else
                    {
                        <span class="cart-qty Inactive"></span>
                    }
                </a>
            </li>
        }
        @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.HeaderLinksAfter, additionalData = Model })
    </ul>
    @if (Model.AllowPrivateMessages && !string.IsNullOrEmpty(Model.AlertMessage))
    {
        //new private message notification
        <script asp-location="Footer">
            $(document).ready(function () {
                displayPopupNotification('@Html.Raw(JavaScriptEncoder.Default.Encode(Model.AlertMessage))', 'success', false);
            });
        </script>
    }
    @if (Model.ShoppingCartEnabled)
    {
        <script asp-location="Footer">
            $(document).ready(function () {
                $('.header').on('mouseenter', '.ico-cart', function () {
                    $('#flyout-cart').addClass('active');
                    
                });
                $('.header').on('mouseleave', '.ico-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
                $('.header').on('mouseenter', '#flyout-cart', function () {
                    $('#flyout-cart').addClass('active');
                });
                $('.header').on('mouseleave', '#flyout-cart', function () {
                    $('#flyout-cart').removeClass('active');
                });
            });
        </script>
    }
</div>
