@model CategoryNavigationModel

@functions {
    bool BreadCrumbContainsCurrentCategoryId(CategorySimpleModel category)
    {
        if (Model.CurrentCategoryId == 0)
            return false;

        if (category.Id == Model.CurrentCategoryId)
            return true;

        foreach (var subCategory in category.SubCategories)
        {
            if (BreadCrumbContainsCurrentCategoryId(subCategory))
            {
                return true;
            }
        }

        return false;
    }

    async Task CategoryLine(CategoryNavigationModel.CategoryLineModel lineModel)
    {
        var active = lineModel.Category.Id == lineModel.CurrentCategoryId || lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0;
        var last = lineModel.Category.Id == lineModel.CurrentCategoryId;
        var liClass = active ? "active" : "inactive";
        if (last)
        {
            liClass += " last";
        }

        <li class="@liClass">
            <input type="checkbox" id="cat-selected" value="@lineModel.Category.Id">
            <label>
                <a href="@Url.RouteUrl("MultiSelectedCategories", new { SeName = lineModel.Category.SeName })">
                    @lineModel.Category.Name
                    @if (lineModel.Category.NumberOfProducts.HasValue)
                    {
                        <text> </text>@T("Categories.TotalProducts", lineModel.Category.NumberOfProducts.Value)
                    }
                </a>
            </label>
            @{
                if (lineModel.Category.Id == lineModel.CurrentCategoryId ||
                    lineModel.Category.SubCategories.Count(BreadCrumbContainsCurrentCategoryId) > 0)
                {
                    if (lineModel.Category.SubCategories.Count > 0)
                    {
                        <ul class="sublist">
                            @foreach (var subCategory in lineModel.Category.SubCategories)
                            {
                                var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                                {
                                    CurrentCategoryId = lineModel.CurrentCategoryId,
                                    Category = subCategory
                                };
                                await CategoryLine(categoryLineModel);
                            }
                        </ul>
                    }
                }
            }
        </li>
    }
}

@if (Model.Categories.Count > 0)
{
    <div class="block block-category-navigation">
      
        <div class="title">
            <div class="toogle-wrap">
                <strong>@T("Categories")</strong>
            </div>          
        </div>
        <div class="listbox">
            <ul class="list">
                @foreach (var category in Model.Categories)
                {
                    var categoryLineModel = new CategoryNavigationModel.CategoryLineModel
                    {
                        CurrentCategoryId = Model.CurrentCategoryId,
                        Category = category
                    };
                    await CategoryLine(categoryLineModel);
                }
            </ul>
        </div>
    </div>
}
<script asp-location="Footer">
    $("#cat-selected").change(function () {
        if ($(this).is(':checked')) {
            var location = window.location.href;
            var category = document.getElementById('cat-selected').value;
            if (category > 0) {
                location = updateQueryStringParameter(location, "cat-selected", category);
            }
            else {
                location = removeParam("cat-selected", location);
            }
            setLocation(location);
        }
    });

    function getParameterByName(name, url) {
        if (!url) url = window.location.href;
        name = name.replace(/[\[\]]/g, '\\$&');
        var regex = new RegExp('[?&]' + name + '(=([^&#]*)|&|#|$)'),
            results = regex.exec(url);
        if (!results) return null;
        if (!results[2]) return '';
        return decodeURIComponent(results[2].replace(/\+/g, ' '));
    }

    function updateQueryStringParameter(uri, key, value) {
        var re = new RegExp("([?&])" + key + "=.*?(&|$)", "i");
        var separator = uri.indexOf('?') !== -1 ? "&" : "?";
        if (uri.match(re)) {
            return uri.replace(re, '$1' + key + "=" + value + '$2');
        }
        else {
            uri = uri + separator + key + "=" + value;
            return uri;
        }
    }

    function removeParam(key, sourceURL) {
        var rtn = sourceURL.split("?")[0],
            param,
            params_arr = [],
            queryString = (sourceURL.indexOf("?") !== -1) ? sourceURL.split("?")[1] : "";
        if (queryString !== "") {
            if (sourceURL.indexOf("&") !== -1) {
                params_arr = queryString.split("&");
                for (var i = params_arr.length - 1; i >= 0; i -= 1) {
                    param = params_arr[i].split("=")[0];
                    if (param === key) {
                        params_arr.splice(i, 1);
                    }
                }
                rtn = rtn + "?" + params_arr.join("&");
            }
        }
        return rtn;
    }
    //$("#cat-selected").change(function () {
    //    var location = window.location.href;
    //    var subcategory = document.getElementById('subregid').value;
    //    if (subcategory > 0)
    //    {
    //        location = updateQueryStringParameter(location, "subregid", subcategory);
    //    }
    //    else {
    //        location = removeParam("subregid", location);
    //    }
    //    setLocation(location);
    //});
</script>