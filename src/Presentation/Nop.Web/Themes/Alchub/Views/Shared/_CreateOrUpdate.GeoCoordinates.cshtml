@model AddressModel
@using Nop.Core.Alchub.Domain
@*Google map script. Note: removed from here, as already added in header*@

<input style="visibility:hidden; height: 0px;" type="text" asp-for="GeoLocationCoordinates" />
@*<div class="card-body" style="display:none">
    @T("Alchub.Admin.Vendors.GeoLocation.Instruction").Text
    <br>
    <br>


    <div class="inputs">
        <nop-label asp-for="GeoLocation" />
        <nop-editor asp-for="GeoLocation" />
        <span asp-validation-for="GeoLocation"></span>
    </div>

    <div class="inputs">
        <label class="col-form-label" for="location-search-input-address">@T("Alchub.Admin.Vendors.GeoLocation.SearchArea.Label").Text</label>
        <div title="" data-toggle="tooltip" class="ico-help" data-original-title="@T("Alchub.Admin.Vendors.GeoLocation.SearchArea.Label.Hint").Text">
            <i class="fas fa-question-circle"></i>
            <input class="text-box single-line" id="location-search-input-address" name="location-search-input-address" placeholder="@T("Alchub.Admin.Vendors.GeoLocation.SearchArea.Placeholder.text")" type="text">
        </div>
    </div>

    <div class="form-group row">
        <div id="location-map" style="width:100%;height:500px;"></div>
    </div>
</div>*@

<script>
    //+++++++++ map script ++++++++++
    //let map;
    //let locationMarkers = [];

    //function initLocationMap() {
    //    var initLatlng = { lat: 39.74958843687717, lng: -101.38981743886231 };
    //    //set init latlong if already saved for vendor.
    //    var initCoordinates = '@Model.GeoLocationCoordinates';
    //    var lat = initLatlng.lat;
    //    var longg = initLatlng.lng;
    //    if (initCoordinates) {
    //        var latlngSplit = "@(Model.GeoLocationCoordinates)".split("@(NopAlchubDefaults.LATLNG_SEPARATOR)");
    //        //split values (by space)
    //        if (latlngSplit != '') {
    //            lat = parseFloat(latlngSplit[0]);
    //            longg = parseFloat(latlngSplit[1]);
    //        }
    //    }

    //    //assign if valid
    //    if (lat && longg) {
    //        initLatlng.lat = lat;
    //        initLatlng.lng = longg;
    //    }

    //    //map
    //    map = new google.maps.Map(document.getElementById("location-map"), {
    //        zoom: 5,
    //        center: initLatlng,
    //    });

    //    //configure the click listener.
    //    map.addListener("click", (mapsMouseEvent) => {

    //        //get latlng
    //        var latlongJson = mapsMouseEvent.latLng.toJSON();
    //        debugger;
    //        lat = latlongJson['lat'];
    //        longg = latlongJson['lng'];
    //        console.log(lat + ' --- ' + longg);
    //        //split values (by space) & assign to filed
    //        $("#@Html.IdFor(model => model.GeoLocationCoordinates)").val(lat + '@(NopAlchubDefaults.LATLNG_SEPARATOR)' + longg);

    //        //clear other markers.
    //        deleteMarkers();

    //        //Adds a marker on click.
    //        addMarker(mapsMouseEvent.latLng);

    //        //fill addres1 from latlng
    //        getReverseGeocodingData(lat, longg);
    //    });

    //    //if latlng already set then, Adds marker at init to the map & also zoom the location
    //    if (initCoordinates) {
    //        addMarker(initLatlng);
    //        map.setZoom(12);
    //    }

    //    //autocomplete searchbar
    //    googleSearchAutocompleteAddress();

    //}

    //window.initLocationMap = initLocationMap;

    //// Adds a marker to the map and push to the array.
    //function addMarker(position) {
    //    const marker = new google.maps.Marker({
    //        position,
    //        map,
    //    });

    //    locationMarkers.push(marker);
    //}

    //// Sets the map on all markers in the array.
    //function setMapOnAll(gmap) {
    //    for (let i = 0; i < locationMarkers.length; i++) {
    //        locationMarkers[i].setMap(gmap);
    //    }
    //}

    //// Removes the markers from the map, but keeps them in the array.
    //function hideMarkers() {
    //    setMapOnAll(null);
    //}

    //// Shows any markers currently in the array.
    //function showMarkers() {
    //    setMapOnAll(map);
    //}

    //// Deletes all markers in the array by removing references to them.
    //function deleteMarkers() {
    //    hideMarkers();
    //    locationMarkers = [];
    //}

    //search autocomplete
    function googleSearchAutocompleteAddress() {

        // Create the search box and link it to the UI element.
        const inputAdderess = document.getElementById("@Html.IdFor(model => model.Address1)");
        const searchBoxAddress = new google.maps.places.SearchBox(inputAdderess);

        //remove previuse coordinates to prevent user from entering invalid address
        inputAdderess.addEventListener("keyup", () => {
            $("#@Html.IdFor(model => model.GeoLocationCoordinates)").val('');
        });

        // Listen for the event fired when the user selects a prediction and retrieve
        // more details for that place.
        searchBoxAddress.addListener("places_changed", () => {
            const placesAddress = searchBoxAddress.getPlaces();

            if (placesAddress.length == 0) {
                return;
            }

            //assign coordinates to hiddent filed
            $("#@Html.IdFor(model => model.GeoLocationCoordinates)").val(placesAddress[0].geometry.location.lat() + '@(NopAlchubDefaults.LATLNG_SEPARATOR)' + placesAddress[0].geometry.location.lng());

            ////// Clear out the old markers.
            ////locationMarkers.forEach((marker) => {
            ////    marker.setMap(null);
            ////});
            ////locationMarkers = [];

            //// For each place, get the icon, name and location.
            //const boundsAddress = new google.maps.LatLngBounds();

            //placesAddress.forEach((place) => {
            //    if (!place.geometry || !place.geometry.location) {
            //        console.log("Returned place contains no geometry");
            //        return;
            //    }

            //    if (place.geometry.viewport) {
            //        // Only geocodes have viewport.
            //        boundsAddress.union(place.geometry.viewport);
            //    } else {
            //        boundsAddress.extend(place.geometry.location);
            //    }
            //});
            //map.fitBounds(boundsAddress);
        });
    }

    //function getReverseGeocodingData(lat, lng) {
    //    var latlng = new google.maps.LatLng(lat, lng);
    //    // This is making the Geocode request
    //    var geocoder = new google.maps.Geocoder();
    //    geocoder.geocode({ 'latLng': latlng }, (results, status) => {
    //        if (status !== google.maps.GeocoderStatus.OK) {
    //            alert(status);
    //            $("#@Html.IdFor(model => model.GeoLocation)").val("");
    //        }
    //        // This is checking to see if the Geoeode Status is OK before proceeding
    //        if (status == google.maps.GeocoderStatus.OK) {
    //            console.log(results);
    //            var address = (results[0].formatted_address);
    //            $("#@Html.IdFor(model => model.GeoLocation)").val(address);
    //        }
    //    });
    //}

    //init map on ready
    $(document).ready(function () {
        //initLocationMap();
        googleSearchAutocompleteAddress();
    })
    //--------- map script ---------

    $(document).ready(function () {
        //set readoly GeoLocationCoordinates
        $("#@Html.IdFor(model => model.GeoLocation)").prop("readonly", true);
        $("#@Html.IdFor(model => model.GeoLocationCoordinates)").prop("readonly", true);
    })

</script>