@inject IThemeContext themeContext

@{
    Layout = "_Root";
}
@{
    //current category ID
    var currentCategoryId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("category", StringComparison.InvariantCultureIgnoreCase))
    {
        currentCategoryId = Convert.ToInt32(Url.ActionContext.RouteData.Values["categoryId"].ToString());
    }


    //current manufacturer ID
    var currentManufacturerId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("catalog", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("manufacturer", StringComparison.InvariantCultureIgnoreCase))
    {
        currentManufacturerId = Convert.ToInt32(Url.ActionContext.RouteData.Values["manufacturerId"].ToString());
    }


    //current product ID
    var currentProductId = 0;
    if (Url.ActionContext.RouteData.Values["controller"].ToString().Equals("product", StringComparison.InvariantCultureIgnoreCase) &&
        Url.ActionContext.RouteData.Values["action"].ToString().Equals("productdetails", StringComparison.InvariantCultureIgnoreCase))
    {
        currentProductId = Convert.ToInt32(Url.ActionContext.RouteData.Values["productId"].ToString());
    }
}

@await RenderSectionAsync("Breadcrumb", false)


<div class="center-2">
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnBefore })
    @RenderBody()
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.MainColumnAfter })
</div>
<div class="side-2">
    <div class="custome-select-box ">
        <div class="select-navigation mobile">
            <select id="form-select" aria-label="Default select example" onchange="setLocation(this.value)" class="myselect">
                <option data-url="/customer/info">@T("account.customerinfo")</option>
                <option data-url="/customer/favorite">@T("Account.Favorite")</option>
                <option data-url="/customer/addresses">@T("account.customeraddresses")</option>
                <option data-url="/order/history">@T("account.customerorders")</option>
                <option data-url="/customer/changepassword">@T("account.changepassword")</option>
            </select>
        </div>
    </div>
    @if (IsSectionDefined("left"))
    {
        @await  Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
    @await RenderSectionAsync("left")
@await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
    }
    else
    {
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnBefore })
    @await RenderSectionAsync("CatalogFilters", false);
    @await Component.InvokeAsync("CategoryNavigation", new { currentCategoryId = currentCategoryId, currentProductId = currentProductId })
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfterCategoryNavigation })
    @await Component.InvokeAsync("ManufacturerNavigation", new { currentManufacturerId = currentManufacturerId })
    @await Component.InvokeAsync("VendorNavigation")
    @await Component.InvokeAsync("RecentlyViewedProductsBlock", new { productThumbPictureSize = 64 })
    @await Component.InvokeAsync("PopularProductTags")
    @await Component.InvokeAsync("PollBlock", new { systemKeyword = "LeftColumnPoll" })
    @await Component.InvokeAsync("Widget", new { widgetZone = PublicWidgetZones.LeftSideColumnAfter })
    }
</div>
<script asp-location="Footer">
    const select = document.querySelector(".myselect");
    const options = document.querySelectorAll(".myselect option");

    // 1
    select.addEventListener("change", function () {
        const url = this.options[this.selectedIndex].dataset.url;
        if (url) {
            location.href = url;
        }
    });

    // 2
    for (const option of options) {
        const url = option.dataset.url;
        if (location.href.includes(url)) {
            option.setAttribute("selected", "");
            break;
        }
    }
</script>