@model ShoppingCartModel
@{
    Layout = "_ColumnsOne";

    //title
    NopHtml.AddTitleParts(T("PageTitle.ShoppingCart").Text);
    //page class
    NopHtml.AppendPageCssClassParts("html-shopping-cart-page cart-pages");
}
@if (!Model.OnePageCheckoutEnabled)
{
    @await Component.InvokeAsync("CheckoutProgress", new { step = CheckoutProgressStep.Cart })
}
<div class="container-box">
    <div class="page shopping-cart-page">
        <div class="page-title">
            <h1>@T("ShoppingCart")</h1>
        </div>
        <div class="page-body">
            @await Component.InvokeAsync("OrderSummary", new { overriddenModel = Model })
        </div>
    </div>
</div>

<script asp-location="Footer">
    function itemquantitychange(productId, itemId) {
        if (event.keyCode == 13) {
            event.preventDefault();
            $('#itemquantity' + itemId).blur();
            return false;
        }
    }

    function UpdateQuantity(productId, itemId) {
        var enteredQuantity = $('#itemquantity' + itemId).val();
        var regex = new RegExp("^[0-9]{0,3}?$");
        var isValid = true;
        if (regex.test(enteredQuantity)) {
            isValid = true;
        }
        else {
            var wrongQuantityMsg = "@T("Wrong.QuantityValue")";
            alert(wrongQuantityMsg)
            isValid = false;
        }

        //check for positive and non-decimal numbers
        if (isValid) {
            var postData = {
                productId: productId,
                shoppingCartTypeId: 1,
                quantity: enteredQuantity,
                manuallyChange: true
            };
            addAntiForgeryToken(postData);

            AjaxCart.setLoadWaiting(true);

                $.ajax({
                    cache: false,
                    url: "@(Url.Action("UpdateItemQuantity","ShoppingCart"))",
                    type: "POST",
                    data: postData,
                    success: function (data, textStatus, jqXHR) {
                        if (data.success) {
                            AjaxCart.success_process(data);
                            if (data.updateOrderSummaryHtml) {
                                $('.order-summary-content').html(data.updateOrderSummaryHtml);
                            }
                        }
                        else {
                            alert(data.message);
                        }
                    },
                    complete: function (jqXHR, textStatus) {
                        AjaxCart.resetLoadWaiting();
                    },
                });
            }
        }

    function UpdateMinus(productId, itemId) {
        var enteredQuantity = $('#itemquantity' + itemId).val();
        if (enteredQuantity == 1) {
            removefromShoppingCart(itemId);
        }

        var postData = {
            productId: productId,
            shoppingCartTypeId: 1,
            quantity: -1,
            manuallyChange: false
        };
        addAntiForgeryToken(postData);

        if (AjaxCart.loadWaiting !== false) {
            return;
        }
        AjaxCart.setLoadWaiting(true);

           $.ajax({
               cache: false,
               url: "@(Url.Action("UpdateItemQuantity","ShoppingCart"))",
               type: "POST",
               data: postData,
               success: function (data, textStatus, jqXHR) {
                   if (data.success) {
                       AjaxCart.success_process(data);
                       if (data.updateOrderSummaryHtml) {
                           $('.order-summary-content').html(data.updateOrderSummaryHtml);
                       }
                   }
                   else {
                       alert(data.message);
                   }
               },
               complete: function (jqXHR, textStatus) {
                   AjaxCart.resetLoadWaiting();
               },
           });
        }

        function UpdatePlus(productId, itemId) {
           var postData = {
               productId: productId,
               shoppingCartTypeId: 1,
               quantity: 1,
               manuallyChange: false
           };
           addAntiForgeryToken(postData);
           AjaxCart.setLoadWaiting(true);

           $.ajax({
               cache: false,
               url: "@(Url.Action("UpdateItemQuantity","ShoppingCart"))",
               type: "POST",
               data: postData,
               success: function (data, textStatus, jqXHR) {
                   if (data.success) {
                       AjaxCart.success_process(data);
                       if (data.updateOrderSummaryHtml) {
                           $('.order-summary-content').html(data.updateOrderSummaryHtml);
                       }
                   }
                   else {
                       alert(data.message);
                   }
               },
               complete: function (jqXHR, textStatus) {
                   AjaxCart.resetLoadWaiting();
               },
           });
        }
    </script>